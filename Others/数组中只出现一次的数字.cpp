/**
 * 一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。 
 * 剑指offer
 * 主要是异或的运用：结合律  交换律
 * 0异或任何一个数 都等于这个数
 * 一个数异或自己 等于0   所以偶数个相同的数异或 最后等于0
 */

#include <iostream>
#include <vector>
using namespace std;

void FindNumsAppearOnce(vector<int> data, int *num1, int *num2)
{
    int len = data.size();
    if (len <= 2)
        return;
    // 得到两个只出现了1次的数异或的结果
    int eor = 0;
    for (int i = 0; i < len; i++)
        eor ^= data[i];

    // int index = 1;
    // while ((eor & index) == 0)
    //     index <<= 1;
    // 一句顶三句：eor二进制补码找到第一个1
    int index = eor & (~eor + 1);
    /*******************************************************************************************
    * 首先：位运算中异或的性质：两个相同数字异或=0，一个数和0异或还是它本身。
    * 当只有一个数出现一次时，其它数出现两次时，我们把数组中所有的数，依次异或运算，
    * 最后剩下的就是落单的数，因为成对儿出现的都抵消了。
    *
    * 依照这个思路，我们来看两个数（我们假设是AB）出现一次的数组。
    * 我们首先还是先异或，剩下的数字肯定是A、B异或的结果，这个结果的二进制中的1，表现的是A和B的不同的位。
    * 我们就取第一个1所在的位数，假设是第3位，接着把原数组分成两组，分组标准是第3位是否为1。
    * 如此，相同的数肯定在一个组，因为相同数字所有位都相同，而不同的数，肯定不在一组。
    * 然后把这两个组按照最开始的思路，依次异或，剩余的两个结果就是这两个只出现一次的数字。
    ********************************************************************************************/
    *num1 = 0;
    for (int i = 0; i < len; i++)
    {
        if ((data[i] & index) != 0)
            *num1 ^= data[i];
    }

    *num2 = *num1 ^ eor;
    return;
}

int main()
{
    int *num1 = new int;
    int *num2 = new int;
    FindNumsAppearOnce({2, 4, 3, 6, 3, 2, 5, 5}, num1, num2);
    cout << *num1 << endl
         << *num2;
    return 0;
}